(define (describe-time seconds)
  (se (biggest-unit seconds)
      (let ((remain (reduce-biggest-unit seconds)))
	(if (> remain 0)
	    (describe-time remain)
	    '()))))

(define (biggest-unit seconds)
  (let* ((minute 60)
	 (hour (* 60 minute))
	 (day (* 24 hour))
	 (week (* 7 day))
	 (year (* 52 week))
	 (century (* 100 year)))
    (cond ((>= seconds century) (let ((c (quotient seconds century)))
				  (se c (if (> c 1) 'centuries 'century))))
	  ((>= seconds year) (let ((y (quotient seconds year)))
			       (se y (if (> y 1) 'years 'year))))
	  ((>= seconds week) (let ((w (quotient seconds week)))
			       (se w (if (> w 1) 'weeks 'week))))
	  ((>= seconds day) (let ((d (quotient seconds day)))
			      (se d (if (> d 1) 'days 'day))))
	  ((>= seconds hour) (let ((h (quotient seconds hour)))
			       (se h (if (> h 1) 'hours 'hour))))
	  ((>= seconds minute) (let ((m (quotient seconds minute)))
				 (se m (if (> m 1) 'minutes 'minute))))
	  (else (se seconds (if (> seconds 1) 'seconds 'second))))))

(define (reduce-biggest-unit seconds)
  (let* ((minute 60)
	 (hour (* 60 minute))
	 (day (* 24 hour))
	 (week (* 7 day))
	 (year (* 52 week))
	 (century (* 100 year)))
    (cond ((>= seconds century) (remainder seconds century))
	  ((>= seconds year) (remainder seconds year))
	  ((>= seconds week) (remainder seconds week))
	  ((>= seconds day) (remainder seconds day))
	  ((>= seconds hour) (remainder seconds hour))
	  ((>= seconds minute) (remainder seconds minute))
	  (else 0))))